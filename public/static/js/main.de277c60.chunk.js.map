{"version":3,"sources":["reducers/ordersReducer.js","reducers/itemsReducer.js","reducers/rootReducer.js","components/Nav.js","containers/NavBarContainer.js","actions/index.js","containers/NewItemContainer.js","components/ItemCard.js","containers/ItemsContainer.js","components/NeededItem.js","containers/ReviewOrderContainer.js","containers/OrderHistoryContainer.js","components/OrderShow.js","App.js","index.js"],"names":["initialState","orders","items","neededItems","loading","ordersLoaded","currentOrder","itemsLoaded","onHand","par","currentItem","amountNeeded","saved","rootReducer","combineReducers","ordersReducer","state","action","type","item","order","itemsReducer","name","clearedItems","Nav","Navbar","bg","expand","fixed","Row","Col","to","Brand","Button","NavBarContainer","baseUrl","getItems","dispatch","fetch","then","resp","json","itemsJSON","itemOnHandUpdated","NewItemFormContainer","handleSubmit","e","preventDefault","target","value","props","addItem","history","id","this","updateItemName","updateItemPar","className","Form","onSubmit","Group","Label","Control","as","itemName","onChange","handleChange","itemPar","Component","connect","store","method","headers","body","JSON","stringify","push","ItemCard","setState","updatedItem","on_hand","amount_needed","updateCurrentItem","Card","Body","ListGroup","ListGroupItem","ItemsContainer","handleSubmitOrder","itemCards","map","i","key","Container","CardGroup","variant","size","block","updateOnHand","NeededItem","ReviewOrderContainer","addOrder","orderItems","filter","htmlFor","clearItemCounts","OrderHistoryContainer","searchTerm","handleSearch","filterOrders","filteredOrders","toLowerCase","indexOf","allOrders","getOrders","allOrderInfo","Date","created_at","toLocaleDateString","day","month","year","hour","minute","second","filteredOrderInfo","inline","Table","bordered","hover","ordersJSON","OrderShow","match","params","getOrder","join","App","exact","path","component","NewItemContainer","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"uyBAAA,IAAMA,EAAe,CACjBC,OAAQ,GACRC,MAAO,GACPC,YAAa,GACbC,SAAS,EACTC,cAAc,EACdC,aAAc,KACdC,aAAa,G,yjBCPjB,IAAMP,EAAe,CACjBE,MAAO,GACPE,SAAS,EACTG,aAAa,EACbC,OAAQ,EACRC,IAAK,EACLC,YAAa,GACbC,aAAc,EACdC,OAAO,GCCIC,EALKC,0BAAgB,CAChCC,cFMyB,WAAmC,IAAlCC,EAAiC,uDAAzBhB,EAAciB,EAAW,uCAC3D,OAAQA,EAAOC,MACX,IAAK,eACD,OAAO,EAAP,GACOF,EADP,CAEIb,YAAY,GAAD,mBAAMa,EAAMb,aAAZ,CAAyBc,EAAOE,SAEnD,IAAK,YACD,OAAO,EAAP,GACOH,EADP,CAEIZ,SAAS,EACTE,aAAcW,EAAOG,QAE7B,IAAK,aACD,OAAO,EAAP,GACOJ,EADP,CAEIf,OAAQgB,EAAOhB,OACfG,SAAS,EACTC,cAAc,IAEtB,IAAK,YACD,OAAO,EAAP,GACOW,EADP,CAEIf,OAAO,GAAD,mBAAMe,EAAMf,QAAZ,CAAoBgB,EAAOG,UAEzC,IAAK,iBACD,OAAO,EAAP,GACOJ,EADP,CAEIZ,SAAS,IAEjB,QACI,OAAOY,IEpCfK,aDKwB,WAAmC,IAAlCL,EAAiC,uDAAzBhB,EAAciB,EAAW,uCAC1D,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,KACAF,EADP,CAEId,MAAOe,EAAOf,MACdE,SAAS,EACTG,aAAa,IAErB,IAAK,mBACD,OAAO,KACAS,EADP,CAEIM,KAAML,EAAOK,OAErB,IAAK,kBACD,OAAO,KACAN,EADP,CAEIP,IAAKQ,EAAOR,MAEpB,IAAK,oBACD,OAAO,KACAO,EADP,CAEId,MAAOe,EAAOM,eAEtB,IAAK,sBACD,OAAO,KACAP,EADP,CAEIN,YAAaO,EAAOE,KACpBP,OAAO,IAEf,IAAK,iBACD,OAAO,KACAI,EADP,CAEIR,OAAQS,EAAOT,SAEvB,IAAK,gBACD,OAAO,KACAQ,EADP,CAEIZ,SAAS,IAEjB,IAAK,WACD,OAAO,KACAY,EADP,CAEId,MAAM,GAAD,mBAAMc,EAAMd,OAAZ,CAAmBe,EAAOE,SAEvC,QACI,OAAOH,M,uGEtCJQ,EAfH,WACR,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,MAAM,OACjC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,KAAI,kBAACN,EAAA,EAAOO,MAAR,iBACb,kBAAC,IAAD,CAAMD,GAAG,cAAa,kBAACE,EAAA,EAAD,sBACtB,kBAAC,IAAD,CAAMF,GAAG,WAAU,kBAACE,EAAA,EAAD,2BCDxBC,EANS,WACpB,OACQ,kBAAC,EAAD,O,QCNNC,EAAU,wBAQHC,EAAW,WACpB,OAAO,SAAAC,GAEH,OADAA,EAAS,CAAEnB,KAAM,kBACVoB,MAAMH,EAAU,UAClBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,OAAOL,EAAS,CAAEnB,KAAM,YAAahB,MAAOwC,SA0D/CC,EAAoB,SAAAxB,GAC7B,MAAO,CACHD,KAAM,sBAAuBC,S,QCpE/ByB,E,2MAYFC,aAAe,SAACC,GACZA,EAAEC,iBADgB,MAEID,EAAEE,OAAhB1B,EAFU,EAEVA,KAAMb,EAFI,EAEJA,IACRU,EAAO,CAAEG,KAAMA,EAAK2B,MAAOxC,IAAKA,EAAIwC,OAC1C,EAAKC,MAAMC,QAAQhC,EAAM,EAAK+B,MAAME,U,4EAd3BN,GAAI,IAAD,EACUA,EAAEE,OAAhBK,EADI,EACJA,GAAIJ,EADA,EACAA,MACZH,EAAEC,iBACS,SAAPM,EACAC,KAAKJ,MAAMK,eAAeN,GACZ,QAAPI,GACPC,KAAKJ,MAAMM,cAAcP,K,+BAYvB,IAAD,OACL,OACI,yBAAKQ,UAAU,aAEX,kBAACC,EAAA,EAAD,CAAML,GAAG,WAAWM,SAAUL,KAAKT,cAC/B,6BACA,kBAAChB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAAC4B,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,oBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,QACH7C,KAAK,OACL+B,MAAOK,KAAKJ,MAAMc,SAClBC,SAAU,SAAAnB,GAAC,OAAI,EAAKoB,aAAapB,IACjCO,GAAG,UAGX,kBAACK,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,mBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,QACH7C,KAAK,SACL+B,MAAOK,KAAKJ,MAAMiB,QAClBF,SAAU,SAAAnB,GAAC,OAAI,EAAKoB,aAAapB,IACjCO,GAAG,QAEP,6BACA,kBAACpB,EAAA,EAAD,CAAQf,KAAK,UAAb,UAGR,kBAACY,EAAA,EAAD,a,GApDWsC,aAoEpBC,eARS,SAAAC,GACpB,MAAO,CACHN,SAAUM,EAAMjD,aAAa2C,SAC7BG,QAASG,EAAMjD,aAAa8C,WAKI,CAAEhB,QDrCnB,SAAChC,EAAMiC,GAC1B,OAAO,SAAAf,GACH,OAAOC,MAAMH,EAAU,SAAU,CAC7BoC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAExD,WAEtBoB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAApB,GACFkB,EAAS,CAAEnB,KAAM,WAAYC,SAC7BiC,EAAQwB,KAAK,eCwBsBrB,eDvDrB,SAACjC,GAC3B,OAAO,SAAAe,GACHA,EAAS,CAAEnB,KAAM,mBAAoBI,WCqDsBkC,cDjDtC,SAAC/C,GAC1B,OAAO,SAAA4B,GACHA,EAAS,CAAEnB,KAAM,kBAAmBT,WC+C7B4D,CAAqEzB,G,wBC+BrEiC,E,YApGX,WAAY3B,GAAQ,IAAD,8BACf,4CAAMA,KAOVgB,aAAe,SAACpB,GAAO,IAAD,EACMA,EAAEE,OAAlB1B,EADU,EACVA,KAAM2B,EADI,EACJA,MACd,EAAK6B,SAAL,eACKxD,EAAO2B,KAXG,EAgBnBJ,aAAe,SAAAC,GACXA,EAAEC,iBACF,IAAMgC,EAAc,CAChBzD,KAAM,EAAK4B,MAAM/B,KAAKG,KACtBb,IAAK,EAAKyC,MAAM/B,KAAKV,IACrBuE,QAAS,EAAKhE,MAAMR,OACpByE,cAAe,EAAK/B,MAAM/B,KAAKV,IAAM,EAAKO,MAAMR,OAChD6C,GAAI,EAAKH,MAAM/B,KAAKkC,IAExB,EAAKyB,SAAS,CACVnE,aAAcoE,EAAYE,gBAE9B,EAAK/B,MAAMgC,kBAAkBH,EAAa,EAAK7B,MAAME,UA1BrD,EAAKpC,MAAQ,CACTR,OAAQ,EACRG,aAAc,GAJH,E,sEA+BV,IAAD,EAKA2C,KAAKJ,MAAM/B,KAHXkC,EAFA,EAEAA,GACA/B,EAHA,EAGAA,KACAb,EAJA,EAIAA,IAGJ,OAmCQ,kBAAC0E,EAAA,EAAD,CAAM1B,UAAU,aACZ,kBAAC0B,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cAAuBhE,GACvB,kBAACgE,EAAA,EAAD,KAAe,8CAAqBhC,KAAKtC,MAAML,eAC/C,kBAAC2E,EAAA,EAAD,KAAe,oCAAW7E,IAC1B,kBAACiD,EAAA,EAAD,CAAML,GAAG,UAAUM,SAAWL,KAAKT,cAC/B,kBAACa,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,QACH7C,KAAK,SACL+B,MAAQK,KAAKtC,MAAMR,OACnByD,SAAWX,KAAKY,aAChBb,GAAKA,EACL/B,KAAK,WAET,6BACA,kBAACW,EAAA,EAAD,CAAQf,KAAK,UAAb,gB,GA3FTkD,aCGjBmB,E,2MAOFC,kBAAoB,SAAA1C,GAChBA,EAAEC,kB,mFANGO,KAAKJ,MAAM3C,aACZ+C,KAAKJ,MAAMd,a,+BAQT,IAAD,OACL,GAAKkB,KAAKJ,MAAM9C,QAcZ,OACI,yBAAKqD,UAAU,cACX,2CAfR,IAAMgC,EAAYnC,KAAKJ,MAAMhD,MAAMwF,KAAI,SAACvE,EAAMwE,GAAP,OACnC,kBAAC,EAAD,CAAUC,IAAKzE,EAAKkC,GAAIlC,KAAMA,EAAM+D,kBAAmB,EAAKhC,MAAMgC,uBAEtE,OACI,kBAACW,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACML,GAEF,6BACA,kBAAC,IAAD,CAAM1D,GAAG,eAAc,kBAACE,EAAA,EAAD,CAAQ8D,QAAQ,YAAYC,KAAK,KAAKC,OAAK,GAA3C,sB,GAtBd7B,aA6CdC,eAVS,SAAAC,GACpB,MAAO,CACHnE,YAAamE,EAAMvD,cAAcZ,YACjCD,MAAOoE,EAAMjD,aAAanB,MAC1BE,QAASkE,EAAMjD,aAAajB,QAC5BG,YAAa+D,EAAMjD,aAAad,YAChCG,YAAa4D,EAAMjD,aAAaX,eAIA,CAAE0B,WAAU8D,aHrBxB,SAAC1F,GACzB,OAAO,SAAA6B,GACHA,EAAS,CAAEnB,KAAM,iBAAkBV,aGmBuB0E,kBHGjC,SAAC/D,GAC9B,OAAO,SAAAkB,GACH,OAAOC,MAAMH,EAAO,iBAAahB,EAAKkC,IAAM,CACxCkB,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAExD,WAEtBoB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAApB,GACFkB,EAASM,EAAkBxB,UGf5BkD,CAAwEkB,GClCxEY,EAfI,SAAC,GAAY,IAAXhF,EAAU,EAAVA,KACb,OACI,6BACI,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,4BAAMX,EAAKG,OAEf,kBAACQ,EAAA,EAAD,KACI,gCAAOX,EAAK8D,mBCJ9BmB,E,YACF,WAAYlD,GAAQ,IAAD,8BACf,4CAAMA,KAUVgB,aAAe,SAAApB,GAAM,IAAD,EACQA,EAAEE,OAAlB1B,EADQ,EACRA,KAAM2B,EADE,EACFA,MACd,EAAK6B,SAAL,eACKxD,EAAO2B,KAdG,EAkBnBJ,aAAe,SAAAC,GACXA,EAAEC,iBACF,IAAM7C,EAAQ,EAAKgD,MAAMhD,MAAMwF,KAAI,SAAAvE,GAAI,gBAAOA,EAAKG,KAAZ,YAAoBH,EAAK8D,kBAC1D7D,EAAQ,CAAEE,KAAMwB,EAAEE,OAAO1B,KAAK2B,MAAO9C,YAAaD,GACxD,EAAKgD,MAAMmD,SAASjF,EAAO,EAAK8B,MAAME,UApBtC,EAAKpC,MAAQ,CACTM,KAAM,IAHK,E,iFAQfgC,KAAKJ,MAAMd,a,+BAkBX,IACMkE,EADchD,KAAKJ,MAAMhD,MAAMqG,QAAO,SAAApF,GAAI,OAAIA,EAAK8D,iBAC1BS,KAAI,SAAAvE,GAAI,OACnC,kBAAC,EAAD,CAAYA,KAAMA,EAAMyE,IAAKzE,EAAKkC,QAEtC,OACI,6BACI,4BAAKiD,GACL,kBAACzE,EAAA,EAAD,KACI,kBAAC6B,EAAA,EAAD,CAAMC,SAAUL,KAAKT,cACjB,kBAACa,EAAA,EAAKG,MAAN,CAAY2C,QAAQ,cAApB,iBACA,kBAAC9C,EAAA,EAAKI,QAAN,CACIC,GAAG,QACHzC,KAAK,OACLJ,KAAK,OACL+B,MAAOK,KAAKtC,MAAMM,KAClB2C,SAAUX,KAAKY,eAEnB,6BACA,kBAACjC,EAAA,EAAD,CAAQf,KAAK,UAAb,e,GA7CWkD,aA4DpBC,eANS,SAAAC,GACpB,MAAO,CACHpE,MAAOoE,EAAMjD,aAAanB,SAIM,CAAEmG,SL+BlB,SAACjF,EAAOgC,GAC5B,OAAO,SAAAf,GACH,OAAOC,MAAMH,EAAU,UAAW,CAC9BoC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEvD,YAEtBmB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAnB,GACFiB,EAAS,CAAEnB,KAAM,YAAaE,UAC9BgC,EAAQwB,KAAK,gBK5CuBxC,WAAUqE,gBLiD/B,SAAClF,GAC5B,OAAO,SAAAc,GACH,OAAOA,EAAS,CAAEnB,KAAM,oBAAqBK,oBKnDtC8C,CAAkE+B,G,QC7D3EM,E,YACF,WAAYxD,GAAQ,IAAD,8BACf,4CAAMA,KAaVgB,aAAe,SAACpB,GACZA,EAAEC,iBACF,IAAME,EAAQH,EAAEE,OAAOC,MACvB,EAAK6B,SAAS,CACV6B,WAAY1D,KAlBD,EAsBnB2D,aAAe,SAAC9D,GACZA,EAAEC,iBACF,EAAK8D,aAAa,EAAK7F,MAAM2F,aAxBd,EA4BnBE,aAAe,SAACF,GACZ,IAAIG,EAAiB,EAAK5D,MAAMjD,OAChC6G,EAAiBA,EAAeP,QAAO,SAACnF,GAEpC,OAAwD,IADxCA,EAAME,KAAKyF,cACVC,QAAQL,EAAWI,kBAExC,EAAKjC,SAAS,CACVgC,oBAhCJ,EAAK9F,MAAQ,CACT2F,WAAY,GACZM,UAAW,GACXH,eAAgB,IANL,E,iFAWfxD,KAAKJ,MAAMgE,c,+BA8BX,IAAMJ,EAAiBxD,KAAKtC,MAAM8F,eAG5BK,EAFY7D,KAAKJ,MAAMjD,OAEEyF,KAAI,SAAAtE,GAAK,OACpC,2BAAOwE,IAAKxE,EAAMiC,IACd,4BACI,4BAAI,kBAAC,IAAD,CAAMtB,GAAE,kBAAaX,EAAMiC,KAAOjC,EAAMiC,KAC5C,4BAAI,kBAAC,IAAD,CAAMtB,GAAE,kBAAaX,EAAMiC,KAAOjC,EAAME,OAC5C,4BAAK,IAAI8F,KAAKhG,EAAMiG,YAAYC,mBAAmB,QAAS,CACxDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,kBAOlBC,EAAoBf,EAAepB,KAAI,SAAAtE,GAAK,OAC9C,2BAAOwE,IAAKxE,EAAMiC,IACd,4BACI,4BAAI,kBAAC,IAAD,CAAMtB,GAAE,kBAAaX,EAAMiC,KAAOjC,EAAMiC,KAC5C,4BAAI,kBAAC,IAAD,CAAMtB,GAAE,kBAAaX,EAAMiC,KAAOjC,EAAME,OAC5C,4BAAK,IAAI8F,KAAKhG,EAAMiG,YAAYC,mBAAmB,QAAS,CACxDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,kBAQxB,OACI,6BACI,kBAAC/F,EAAA,EAAD,KACI,kBAAC6B,EAAA,EAAD,CAAMoE,OAAO,OAAOnE,SAAUL,KAAKsD,cAC/B,kBAAClD,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,QACHzC,KAAK,aACL+B,GAAG,SACHY,SAAUX,KAAKY,aACfhD,KAAK,SAET,kBAACe,EAAA,EAAD,CAAQf,KAAK,UAAb,YAGR,+CACA,kBAAC6G,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACjC,KAAK,MACzB6B,GAEF,kBAACE,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACjC,KAAK,MACvB,+BACI,4BACI,yCACA,oCACA,2CAGNmB,Q,GA7Gc/C,aA2HrBC,eANS,SAAAC,GACpB,MAAO,CACHrE,OAAQqE,EAAMvD,cAAcd,UAII,CAAEiH,UNnDjB,WACrB,OAAO,SAAA7E,GAEH,OADAA,EAAS,CAAEnB,KAAM,mBACVoB,MAAMH,EAAU,WAClBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAA2F,GACF,OAAO7F,EAAS,CAAEnB,KAAM,aAAcjB,OAAQiI,UM6C/C7D,CAAwCqC,GC7H1CyB,EAAb,4LAGQ,IAAM9E,EAAKC,KAAKJ,MAAMkF,MAAMC,OAAOhF,GACnCC,KAAKJ,MAAMoF,SAASjF,KAJ5B,+BAQQ,IAAKC,KAAKJ,MAAM9C,SAAWkD,KAAKJ,MAAM5C,aAAc,CAChD,IAAMJ,EAAQoD,KAAKJ,MAAM5C,aAAaH,YACtC,OACI,4BAAMD,EAAMqI,KAAK,OAGrB,OACI,6BAAK,+CAfrB,GAA+BnE,aA6BhBC,eAPS,SAAAC,GACpB,MAAO,CACHhE,aAAcgE,EAAMvD,cAAcT,aAClCF,QAASkE,EAAMvD,cAAcX,WAIG,CAAEkI,SPwDlB,SAAAjF,GACpB,OAAO,SAAAhB,GAEH,OADAA,EAAS,CAAEnB,KAAM,kBACVoB,MAAMH,EAAU,WAAakB,GAC/Bd,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAnB,GAAK,OAAIiB,EAAS,CAAEnB,KAAM,YAAaE,gBO7D1CiD,CAAuC8D,GCIvCK,G,6LArBX,OACE,kBAAC,IAAD,KACE,kBAAC3C,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,6BACA,6BACA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAIC,UAAYpD,IAClC,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,aAAaC,UAAYC,IAC3C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAYpD,IACvC,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,cAAcC,UAAYvC,IAC5C,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,UAAUC,UAAYjC,IACxC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,cAAcC,UAAYR,W,GAhBtC/D,c,SCHZE,GAAQuE,sBACVhI,EACAiI,kBACIC,0BAAgBC,QAMxBC,IAASC,OACL,kBAAC,IAAD,CAAU5E,MAAOA,IACb,kBAAC,EAAD,OAEJ6E,SAASC,eAAe,W","file":"static/js/main.de277c60.chunk.js","sourcesContent":["const initialState = {\n    orders: [],\n    items: [],\n    neededItems: [],\n    loading: false,\n    ordersLoaded: false,\n    currentOrder: null,\n    itemsLoaded: false,\n}\n\n\nexport const ordersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"UPDATE_ORDER\":\n            return {\n                ...state,\n                neededItems: [...state.neededItems, action.item]\n            }\n        case \"GET_ORDER\":\n            return {\n                ...state,\n                loading: false,\n                currentOrder: action.order\n            }\n        case \"GET_ORDERS\":\n            return {\n                ...state,\n                orders: action.orders,\n                loading: false,\n                ordersLoaded: true\n            }\n        case \"ADD_ORDER\":\n            return {\n                ...state,\n                orders: [...state.orders, action.order]\n            }\n        case \"LOADING_ORDERS\":\n            return {\n                ...state,\n                loading: true\n            }\n        default:\n            return state;\n    }\n}","const initialState = {\n    items: [],\n    loading: false,\n    itemsLoaded: false,\n    onHand: 0,\n    par: 0,\n    currentItem: \"\",\n    amountNeeded: 0,\n    saved: false\n}\n\nexport const itemsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"GET_ITEMS\":\n            return {\n                ...state,\n                items: action.items,\n                loading: false,\n                itemsLoaded: true,\n            }\n        case \"UPDATE_ITEM_NAME\":\n            return {\n                ...state,\n                name: action.name\n            }\n        case \"UPDATE_ITEM_PAR\":\n            return {\n                ...state,\n                par: action.par\n            }\n        case \"CLEAR_ITEM_COUNTS\":\n            return {\n                ...state, \n                items: action.clearedItems\n            }\n        case \"UPDATE_CURRENT_ITEM\":\n            return {\n                ...state,\n                currentItem: action.item,\n                saved: true\n            }\n        case \"UPDATE_ON_HAND\":\n            return {\n                ...state,\n                onHand: action.onHand\n            }\n        case \"LOADING_ITEMS\":\n            return {\n                ...state,\n                loading: true\n            }\n        case \"ADD_ITEM\":\n            return {\n                ...state,\n                items: [...state.items, action.item]\n            }\n        default:\n            return state;\n    }\n}\n\n","import { combineReducers } from 'redux';\nimport { ordersReducer } from './ordersReducer';\nimport { itemsReducer } from './itemsReducer';\n\nconst rootReducer = combineReducers({\n    ordersReducer,\n    itemsReducer\n})\n\nexport default rootReducer;","import React from 'react'\nimport { Navbar, Button, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nconst Nav = () => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\">\n            <Row>\n                <Col>\n                    <Link to='/'><Navbar.Brand>ReOrder</Navbar.Brand></Link>\n                    <Link to='/items/new'><Button>Add New Item</Button></Link>\n                    <Link to='/orders'><Button>Order History</Button></Link>\n                </Col>\n            </Row>\n        </Navbar>\n\n    )\n}\n\nexport default Nav","import React from 'react'\nimport {  Container } from 'react-bootstrap'\nimport Nav from '../components/Nav'\n \nconst NavBarContainer = () => {\n    return(\n            <Nav />\n    )\n}\n\nexport default NavBarContainer","const baseUrl = 'http://localhost:3001'\n\nexport const updateOrder = (item) => {\n    return dispatch => {\n        dispatch({ type: \"UPDATE_ORDER\", item })\n    }\n}\n\nexport const getItems = () => {\n    return dispatch => {\n        dispatch({ type: \"LOADING_ITEMS\" })\n        return fetch(baseUrl + '/items')\n            .then(resp => resp.json())\n            .then(itemsJSON => {\n                return dispatch({ type: 'GET_ITEMS', items: itemsJSON })\n            })\n    }\n}\n\nexport const updateItemName = (name) => {\n    return dispatch => {\n        dispatch({ type: \"UPDATE_ITEM_NAME\", name })\n    }\n}\n\nexport const updateItemPar = (par) => {\n    return dispatch => {\n        dispatch({ type: \"UPDATE_ITEM_PAR\", par })\n    }\n}\n\nexport const updateOnHand = (onHand) => {\n    return dispatch => {\n        dispatch({ type: \"UPDATE_ON_HAND\", onHand })\n    }\n}\n\nexport const addItem = (item, history) => {\n    return dispatch => {\n        return fetch(baseUrl + '/items', {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ item })\n        })\n            .then(resp => resp.json())\n            .then(item => {\n                dispatch({ type: \"ADD_ITEM\", item })\n                history.push('/items')\n            })\n    }\n}\n\nexport const updateCurrentItem = (item) => {\n    return dispatch => {\n        return fetch(baseUrl + `/items/${item.id}`, {\n            method: \"PUT\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ item })\n        })\n            .then(resp => resp.json())\n            .then(item => {\n                dispatch(itemOnHandUpdated(item))\n            })\n    }\n}\n\nexport const itemOnHandUpdated = item => {\n    return {\n        type: \"UPDATE_CURRENT_ITEM\", item\n    }\n}\n\nexport const getOrders = () => {\n    return dispatch => {\n        dispatch({ type: \"LOADING_ORDERS\" })\n        return fetch(baseUrl + '/orders')\n            .then(resp => resp.json())\n            .then(ordersJSON => {\n                return dispatch({ type: 'GET_ORDERS', orders: ordersJSON })\n            })\n    }\n}\n\nexport const getOrder = id => {\n    return dispatch => {\n        dispatch({ type: \"LOADING_ORDER\" });\n        return fetch(baseUrl + '/orders/' + id)\n            .then(resp => resp.json())\n            .then(order => dispatch({ type: \"GET_ORDER\", order }))\n    }\n}\n\nexport const addOrder = (order, history) => {\n    return dispatch => {\n        return fetch(baseUrl + '/orders', {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ order })\n        })\n            .then(resp => resp.json())\n            .then(order => {\n                dispatch({ type: \"ADD_ORDER\", order })\n                history.push('/orders')\n            })\n    }\n}\n\nexport const clearItemCounts = (clearedItems) => {\n    return dispatch => {\n        return dispatch({ type: \"CLEAR_ITEM_COUNTS\", clearedItems })\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addItem, updateItemName, updateItemPar } from '../actions/index'\nimport { Form, Button, Col, Row } from 'react-bootstrap'\n\n\nclass NewItemFormContainer extends Component {\n\n    handleChange(e) {\n        const { id, value } = e.target;\n        e.preventDefault();\n        if (id === \"name\") {\n            this.props.updateItemName(value)\n        } else if (id === \"par\") {\n            this.props.updateItemPar(value)\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const { name, par } = e.target\n        const item = { name: name.value, par: par.value }\n        this.props.addItem(item, this.props.history)\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n\n                <Form id=\"new-item\" onSubmit={this.handleSubmit}>\n                    <br />\n                    <Row>\n                        <Col />\n                        <Col>\n                            <Form.Group>\n                                <Form.Label>Item Name: </Form.Label>\n                                <Form.Control\n                                    as=\"input\"\n                                    type=\"text\"\n                                    value={this.props.itemName}\n                                    onChange={e => this.handleChange(e)}\n                                    id=\"name\"\n                                />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Item Par: </Form.Label>\n                                <Form.Control\n                                    as=\"input\"\n                                    type=\"number\"\n                                    value={this.props.itemPar}\n                                    onChange={e => this.handleChange(e)}\n                                    id=\"par\"\n                                />\n                                <br />\n                                <Button type=\"submit\">Save</Button>\n                            </Form.Group>\n                        </Col>\n                        <Col />\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        itemName: store.itemsReducer.itemName,\n        itemPar: store.itemsReducer.itemPar\n    }\n}\n\n\nexport default connect(mapStateToProps, { addItem, updateItemName, updateItemPar })(NewItemFormContainer);\n","import React, { Component } from 'react'\nimport { Card, Col, Row, Form, Button, ListGroupItem, ListGroup } from 'react-bootstrap'\n\n\nclass ItemCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            onHand: 0,\n            amountNeeded: 0\n        }\n    }\n\n    handleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({\n            [name]: value,\n        })\n        \n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const updatedItem = {\n            name: this.props.item.name,\n            par: this.props.item.par,\n            on_hand: this.state.onHand,\n            amount_needed: this.props.item.par - this.state.onHand,\n            id: this.props.item.id\n        }\n        this.setState({\n            amountNeeded: updatedItem.amount_needed\n        })\n        this.props.updateCurrentItem(updatedItem, this.props.history)\n    }\n    \n    render(){\n        const {\n            id,\n            name,\n            par\n        } = this.props.item\n        \n        return (\n                // <Card>\n                // <Card.Body>\n                //     <Row>\n                //         <Col>\n                //             <br />\n                //             <h2> { name } </h2>\n                //         </Col>\n                //         <Col>\n                //             <br />\n                //             <h2>Par: { par }</h2>\n                //         </Col> \n                //         <Col>\n                //             <Form id=\"on-hand\" onSubmit={ this.handleSubmit }>\n                //                 <Form.Label>On Hand:</Form.Label>\n                //                 <Form.Control\n                //                     as=\"input\"\n                //                     type=\"number\"\n                //                     value={ this.state.onHand }\n                //                     onChange={ this.handleChange }\n                //                     id={ id }\n                //                     name=\"onHand\"\n                //                 />\n                //                 <br />\n                //                 <Button type=\"submit\">Save</Button>\n                                \n                //             </Form>\n                //             <br />\n                //         </Col>\n                //         <Col>\n                //             <h2>Amount Needed: { this.state.amountNeeded }</h2>\n                //         </Col>\n                //     </Row>\n                //     </Card.Body>\n                // </Card>\n                <Card className=\"item-card\">\n                    <Card.Body>\n                        <ListGroup>\n                            <ListGroupItem>Name: { name }</ListGroupItem>\n                            <ListGroupItem><h2>Amount Needed: { this.state.amountNeeded }</h2></ListGroupItem>\n                            <ListGroupItem><h2>Par: { par }</h2></ListGroupItem>\n                            <Form id=\"on-hand\" onSubmit={ this.handleSubmit }>\n                                <Form.Label>On Hand:</Form.Label>\n                                <Form.Control\n                                    as=\"input\"\n                                    type=\"number\"\n                                    value={ this.state.onHand }\n                                    onChange={ this.handleChange }\n                                    id={ id }\n                                    name=\"onHand\"\n                                />\n                                <br />\n                                <Button type=\"submit\">Save</Button>\n                                \n                            </Form>\n                        </ListGroup>\n                    </Card.Body>\n                </Card>\n        )\n    }\n}\n\nexport default ItemCard\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getItems, updateOnHand, updateCurrentItem } from '../actions/index'\nimport { Button, Container, CardGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport ItemCard from '../components/ItemCard'\n\nclass ItemsContainer extends Component {\n    componentDidMount() {\n        if (!this.props.itemsLoaded) {\n            this.props.getItems();\n        }\n    }\n\n    handleSubmitOrder = e => {\n        e.preventDefault();\n    }\n\n    render() {\n        if (!this.props.loading) {\n            const itemCards = this.props.items.map((item, i) => (\n                <ItemCard key={item.id} item={item} updateCurrentItem={this.props.updateCurrentItem} />\n            ))\n            return (\n                <Container>\n                <CardGroup>\n                    { itemCards }\n                    </CardGroup>\n                    <br />\n                    <Link to=\"/orders/new\"><Button variant=\"secondary\" size=\"lg\" block>Review Order</Button></Link>\n                </Container>\n            )\n        } else {\n            return (\n                <div className=\"items-list\">\n                    <h1>Loading...</h1>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        neededItems: store.ordersReducer.neededItems,\n        items: store.itemsReducer.items,\n        loading: store.itemsReducer.loading,\n        itemsLoaded: store.itemsReducer.itemsLoaded,\n        currentItem: store.itemsReducer.currentItem\n    }\n}\n\nexport default connect(mapStateToProps, { getItems, updateOnHand, updateCurrentItem })(ItemsContainer);\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\nconst NeededItem = ({item}) => {\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h1>{ item.name }</h1>\n                    </Col>\n                    <Col>\n                        <h1> { item.amount_needed }</h1>\n                    </Col>\n                </Row>\n                \n            </div>\n        )\n}\nexport default NeededItem","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport NeededItem from '../components/NeededItem'\nimport { Button, Form, Row } from 'react-bootstrap'\nimport { addOrder, getItems, clearItemCounts } from '../actions'\n\n\nclass ReviewOrderContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    handleChange = e => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        const items = this.props.items.map(item => `${item.name} ${item.amount_needed}`)\n        const order = { name: e.target.name.value, neededItems: items }\n        this.props.addOrder(order, this.props.history)\n    }\n\n    render() {\n        const neededItems = this.props.items.filter(item => item.amount_needed)\n        const orderItems = neededItems.map(item => (\n            <NeededItem item={item} key={item.id} />\n        ))\n        return (\n            <div>\n                <h4>{orderItems}</h4>\n                <Row>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Label htmlFor=\"order-name\">Order Title: </Form.Label>\n                        <Form.Control\n                            as=\"input\"\n                            name=\"name\"\n                            type=\"text\"\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                        />\n                        <br />\n                        <Button type=\"submit\">\n                            Save\n                        </Button>\n                    </Form>\n                </Row>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = store => {\n    return {\n        items: store.itemsReducer.items\n    }\n}\n\nexport default connect(mapStateToProps, { addOrder, getItems, clearItemCounts })(ReviewOrderContainer)\n","import React, { Component } from 'react'\nimport { getOrders } from '../actions'\nimport { connect } from 'react-redux'\nimport { Table, Form, Button, Row } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nclass OrderHistoryContainer extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            searchTerm: \"\",\n            allOrders: [],\n            filteredOrders: []\n        }\n    }\n\n    componentDidMount() {\n        this.props.getOrders();\n    }\n\n    handleChange = (e) => {\n        e.preventDefault()\n        const value = e.target.value\n        this.setState({\n            searchTerm: value\n        })\n    }\n\n    handleSearch = (e) => {\n        e.preventDefault()\n        this.filterOrders(this.state.searchTerm)\n    }\n\n\n    filterOrders = (searchTerm) => {\n        let filteredOrders = this.props.orders\n        filteredOrders = filteredOrders.filter((order) => {\n            let orderName = order.name.toLowerCase()\n            return orderName.indexOf(searchTerm.toLowerCase()) !== -1\n        })\n        this.setState({\n            filteredOrders\n        })\n    }\n\n    render() {\n\n        const filteredOrders = this.state.filteredOrders\n        const allOrders = this.props.orders\n        \n        const allOrderInfo = allOrders.map(order => (\n            <tbody key={order.id}>\n                <tr>\n                    <td><Link to={`/orders/${order.id}`}>{order.id}</Link></td>\n                    <td><Link to={`/orders/${order.id}`}>{order.name}</Link></td>\n                    <td>{new Date(order.created_at).toLocaleDateString('en-US', {\n                        day: 'numeric',\n                        month: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        second: 'numeric'\n                    })\n                    }\n                    </td>\n                </tr>\n            </tbody>\n        ))\n        const filteredOrderInfo = filteredOrders.map(order => (\n            <tbody key={order.id}>\n                <tr>\n                    <td><Link to={`/orders/${order.id}`}>{order.id}</Link></td>\n                    <td><Link to={`/orders/${order.id}`}>{order.name}</Link></td>\n                    <td>{new Date(order.created_at).toLocaleDateString('en-US', {\n                        day: 'numeric',\n                        month: 'numeric',\n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        second: 'numeric'\n                    })\n                    }\n                    </td>\n                </tr>\n            </tbody>\n        ))\n\n        return (\n            <div>\n                <Row>\n                    <Form inline=\"true\" onSubmit={this.handleSearch}>\n                        <Form.Label>Search:</Form.Label>\n                        <Form.Control\n                            as=\"input\"\n                            name=\"searchTerm\"\n                            id=\"search\"\n                            onChange={this.handleChange}\n                            type=\"text\"\n                        />\n                        <Button type=\"submit\">Search</Button>\n                    </Form>\n                </Row>\n                <h5>Search Results:</h5>\n                <Table bordered hover size=\"sm\">\n                { filteredOrderInfo }\n                </Table>\n                <Table bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Order No.</th>\n                            <th>Name</th>\n                            <th>Timestamp</th>\n                        </tr>\n                    </thead>\n                    { allOrderInfo }\n                </Table>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        orders: store.ordersReducer.orders\n    }\n}\n\nexport default connect(mapStateToProps, { getOrders })(OrderHistoryContainer)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getOrder } from '../actions'\n\nexport class OrderShow extends Component {\n\n    componentDidMount() {\n        const id = this.props.match.params.id\n        this.props.getOrder(id)\n    }\n\n    render() {\n        if (!this.props.loading && this.props.currentOrder) {\n            const items = this.props.currentOrder.neededItems\n            return (\n                <h1>{ items.join('; ') }</h1>\n            )\n        } else {\n            return (\n                <div><h1>Loading...</h1></div>\n            )\n        }\n\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        currentOrder: store.ordersReducer.currentOrder,\n        loading: store.ordersReducer.loading\n    }\n}\n\nexport default connect(mapStateToProps, { getOrder })(OrderShow)","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Container } from 'react-bootstrap'\nimport NavBarContainer from './containers/NavBarContainer';\nimport Home from './components/Home';\nimport NewItemContainer from './containers/NewItemContainer';\nimport ItemsContainer from './containers/ItemsContainer';\nimport ReviewOrderContainer from './containers/ReviewOrderContainer';\nimport OrderHistoryContainer from './containers/OrderHistoryContainer';\nimport OrderShow from './components/OrderShow';\nimport \"bootswatch/dist/flatly/bootstrap.min.css\";\nimport './style/App.css';\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <Router>\n        <Container>\n          <NavBarContainer />\n          <br />\n          <br />\n          <br />\n          <Switch>\n            <Route exact path=\"/\" component={ ItemsContainer } />\n            <Route exact path=\"/items/new\" component={ NewItemContainer } />\n            <Route exact path=\"/items\" component={ ItemsContainer } />\n            <Route exact path=\"/orders/new\" component={ ReviewOrderContainer } />\n            <Route exact path=\"/orders\" component={ OrderHistoryContainer } />\n            <Route exact path=\"/orders/:id\" component={ OrderShow } />\n          </Switch>\n        </Container>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers/rootReducer.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        \n    )\n)\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}